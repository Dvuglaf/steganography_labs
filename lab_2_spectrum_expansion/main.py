# –ó–∞–¥–∞–Ω–∏–µ:
# 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¶–í–ó ùõ∫ –∫–∞–∫ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏–∑ —á–∏—Å–µ–ª,
# —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É. –î–ª–∏–Ω–∞ 1/2 –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–∑ 3 –ø—É–Ω–∫—Ç–∞.
#
# 2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ -
# –î–í–ü (–≤–µ–π–≤–ª–µ—Ç—ã –•–∞–∞—Ä–∞), 3 —É—Ä–æ–≤–Ω—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
#
# 3. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –≤ –ø–ª–æ—Å–∫–æ—Å—Ç—å HH —Å–ø–µ–∫—Ç—Ä–∞.
#
# 4. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Å–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Å–∏–≥–Ω–∞–ª—É.
# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –¥–∏—Å–∫
#
# 5. –°—á–∏—Ç–∞—Ç—å –Ω–æ—Å–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø. 2 –¥–ª—è –Ω–æ—Å–∏—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
#
# 6. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –¶–í–ó ùõ∫ÃÉ –Ω–µ—Å–ª–µ–ø—ã–º –º–µ—Ç–æ–¥–æ–º (—Ç–æ –µ—Å—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç—Ä–∏—Ü—ã
# –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞); –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±–ª–∏–∑–æ—Å—Ç–∏ ùúå(ùõ∫,ùõ∫ÃÉ)
#
# 7. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞ —Å —Ü–µ–ª—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è
# ùëÉùëÜùëÅùëÖ > 30 –¥–ë (–∏–ª–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–æ–ª—å—à–µ–≥–æ 30 –¥–ë), –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è
# –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–∏–±–æ–ª—å—à–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é ùúå.
#
# 8. –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - ¬´Beta: Laplace¬ª
import numpy as np
import pywt
from skimage.io import imread, imshow, show
from matplotlib import pyplot as plt

def read_image(image_path):
    return np.array(imread(image_path)).astype(np.int32)


def zigzag(original: np.ndarray, watermark: np.ndarray, to_embed: bool, embedded: np.ndarray, alpha=1.):
    sorted_matrix = np.sort(original, axis=None).reshape((original.shape[0], original.shape[1]))
    threshold = sorted_matrix[(original.shape[0] - 1) // 2, (original.shape[1] - 1) - 1]
    diag_num = original.shape[0] + original.shape[1] - 1
    i = 0
    j = 1
    m = 0
    n = 1
    for k in range(1, diag_num):  # –Ω–æ–º–µ—Ä –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if i > original.shape[0] - 1:  # –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Å—Ç—Ä–æ–∫–µ
            i -= 1
            j += 1
        if j > original.shape[1] - 1:  # –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Å—Ç–æ–ª–±—Ü—É
            j -= 1
            i += 1
        if k > diag_num // 2:  # –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∏–∂–µ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            n -= 1
        else:
            n += 1
        for l in range(n):  # –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            if np.absolute(original[i][j]) > np.absolute(threshold):
                if to_embed:
                    original[i][j] *= (1 + alpha * watermark[m])
                else:
                    watermark[m] = (embedded[i][j] - original[i][j]) / (alpha * original[i][j])
                m += 1
                if m > len(watermark) - 1:
                    return None
            if k % 2 == 0:  # —á–µ—Ç–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                i -= 1
                j += 1
            else:  # –Ω–µ—á–µ—Ç–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                j -= 1
                i += 1

        if k % 2 == 0:
            i += 1
        else:
            j += 1

    return None

def embedding(image: np.ndarray, key: int, alpha: float, level: int, mean=0., spread=1.):
    wavelet_coeffs = dwt(image, level)
    hh_zone = wavelet_coeffs[1][2]

    size = hh_zone.shape[0] * hh_zone.shape[1] // 2
    watermark = generate_watermark(size, key, mean, spread)


    zigzag(hh_zone, watermark, True, np.zeros(1), alpha)

    wavelet_coeffs_list = list(wavelet_coeffs[1])
    wavelet_coeffs_list[2] = hh_zone
    wavelet_coeffs.pop(1)
    wavelet_coeffs_tuple = tuple(wavelet_coeffs_list)
    wavelet_coeffs.insert(1, wavelet_coeffs_tuple)
    return idwt(wavelet_coeffs), watermark


def extracting(embedded_image: np.ndarray, image: np.ndarray, level: int):
    wavelet_coeffs = dwt(embedded_image, level)
    hh_zone_embedded = wavelet_coeffs[1][2]
    wavelet_coeffs = dwt(image, level)
    hh_zone = wavelet_coeffs[1][2]

    size = hh_zone.shape[0] * hh_zone.shape[1] // 2
    watermark = np.zeros(size)

    zigzag(hh_zone, watermark, False, hh_zone_embedded)

    return watermark

def dwt(image: np.ndarray, level: int):
    return pywt.wavedec2(image, 'haar', level=level)


def idwt(wavelet_coeffs):
    return pywt.waverec2(wavelet_coeffs, 'haar')

def generate_watermark(size: int, key: int, mean: float, spread: float):
    rng = np.random.default_rng(key)
    return rng.normal(mean, spread, size)

def main():
    level = 3  # —É—Ä–æ–≤–µ–Ω—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    mean = 0.  # –ú–û
    spread = 1.  # –°–ö–û
    image = imread("./images/bridge.tif")
    key = 321
    alpha = 1.

    embedded_image, watermark = embedding(image, key, alpha, level)
    extracted_watermark = extracting(embedded_image, image, level)

    print(np.max(np.abs(extracted_watermark - watermark)))

    plt.figure()

    imshow(embedded_image - image, cmap='gray')

    plt.figure()

    imshow(image, cmap='gray')

    show()


main()